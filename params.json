{"name":"Jquery.payment","tagline":"A general purpose library for building credit card forms, validating inputs and formatting numbers.","body":"# jQuery.payment\r\n\r\nA general purpose library for building credit card forms, validating inputs and formatting numbers.\r\n\r\nFor example, you can make a input act like a credit card field (with number formatting, and length restriction):\r\n\r\n``` javascript\r\n$('input.cc-num').payment('formatCardNumber');\r\n```\r\n\r\nThen, when say the payment form is submitted, you can validate the card number on the client-side like so:\r\n\r\n``` javascript\r\nvar valid = $.payment.validateCardNumber($('input.cc-num').val());\r\n\r\nif ( !valid ) {\r\n  alert('Your card is not valid!');\r\n  return false;\r\n}\r\n```\r\n\r\nYou can find a full [demo here](http://stripe.github.com/jquery.payment/example).\r\n\r\nSupported card types are:\r\n\r\n* Visa\r\n* MasterCard\r\n* American Express\r\n* Discover\r\n* JCB\r\n* Diners Club\r\n* Maestro\r\n* Laster\r\n* UnionPay\r\n\r\n## API\r\n\r\n### $.fn.payment('formatCardNumber')\r\n\r\nFormats card numbers:\r\n\r\n* Including a space between every 4 digits\r\n* Restricts input to numbers\r\n* Limits to 16 numbers\r\n* American Express formatting support\r\n* Adds a class of the card type (i.e. 'visa') to the input\r\n\r\nExample:\r\n\r\n``` javascript\r\n$('input.cc-num').payment('formatCardNumber');\r\n```\r\n\r\n### $.fn.payment('formatCardExpiry')\r\n\r\nFormats card expiry:\r\n\r\n* Includes a `/` between the month and year\r\n* Restricts input to numbers\r\n* Restricts length\r\n\r\nExample:\r\n\r\n``` javascript\r\n$('input.cc-exp').payment('formatCardExpiry');\r\n```\r\n\r\n### $.fn.payment('formatCardCVC')\r\n\r\nFormats card CVC:\r\n\r\n* Restricts length to 4 numbers\r\n* Restricts input to numbers\r\n\r\nExample:\r\n\r\n``` javascript\r\n$('input.cc-cvc').payment('formatCardCVC');\r\n```\r\n\r\n### $.fn.payment('restrictNumeric')\r\n\r\nGeneral numeric input restriction.\r\n\r\nExample:\r\n\r\n``` javascript\r\n$('data-numeric').payment('restrictNumeric');\r\n```\r\n\r\n### $.payment.validateCardNumber(number)\r\n\r\nValidates a card number:\r\n\r\n* Validates numbers\r\n* Validates Luhn algorithm\r\n* Validates length\r\n\r\nExample:\r\n\r\n``` javascript\r\n$.payment.validateCardNumber('4242 4242 4242 4242'); //=> true\r\n```\r\n\r\n### $.payment.validateCardExpiry(month, year)\r\n\r\nValidates a card expiry:\r\n\r\n* Validates numbers\r\n* Validates in the future\r\n* Supports year shorthand\r\n\r\nExample:\r\n\r\n``` javascript\r\n$.payment.validateCardExpiry('05', '20'); //=> true\r\n$.payment.validateCardExpiry('05', '2015'); //=> true\r\n$.payment.validateCardExpiry('05', '05'); //=> false\r\n```\r\n\r\n### $.payment.validateCardCVC(cvc, type)\r\n\r\nValidates a card CVC:\r\n\r\n* Validates number\r\n* Validates length to 4\r\n\r\nExample:\r\n\r\n``` javascript\r\n$.payment.validateCardCVC('123'); //=> true\r\n$.payment.validateCardCVC('123', 'amex'); //=> true\r\n$.payment.validateCardCVC('1234', 'amex'); //=> true\r\n$.payment.validateCardCVC('12344'); //=> false\r\n```\r\n\r\n### $.payment.cardType(number)\r\n\r\nReturns a card type. Either:\r\n\r\n* `visa`\r\n* `mastercard`\r\n* `discover`\r\n* `amex`\r\n* `dinersclub`\r\n* `maestro`\r\n* `laser`\r\n* `unionpay`\r\n\r\nThe function will return `null` if the card type can't be determined.\r\n\r\nExample:\r\n\r\n``` javascript\r\n$.payment.cardType('4242 4242 4242 4242'); //=> 'visa'\r\n```\r\n\r\n### $.payment.cardExpiryVal(string) and $.fn.payment('cardExpiryVal')\r\n\r\nParses a credit card expiry in the form of MM/YYYY, returning an object containing the `month` and `year`. Shorthand years, such as `13` are also supported (and converted into the longhand, e.g. `2013`).\r\n\r\n``` javascript\r\n$.payment.cardExpiryVal('03 / 2025'); //=> {month: 3: year: 2025}\r\n$.payment.cardExpiryVal('05 / 04'); //=> {month: 5, year: 2004}\r\n$('input.cc-exp').payment('cardExpiryVal') //=> {month: 4, year: 2020}\r\n```\r\n\r\nThis function doesn't do any validation of the month or year, use `$.payment.validateCardExpiry(month, year)` for that.\r\n\r\n## Example\r\n\r\nLook in `./example/index.html`\r\n\r\n## Building\r\n\r\nRun `cake build`\r\n\r\n## Run tests\r\n\r\nRun `mocha --compilers coffee:coffee-script`\r\n\r\n## Autocomplete recommendations\r\n\r\nWe recommend you turn autocomplete on for credit card forms, except for the CVC field. You can do this by setting the `autocomplete` attribute:\r\n\r\n``` html\r\n<form autocomplete=\"on\">\r\n  <input class=\"cc-number\">\r\n  <input class=\"cc-cvc\" autocomplete=\"off\">\r\n</form>\r\n```\r\n\r\nYou should also mark up your fields using the [Autocomplete Types spec](http://wiki.whatwg.org/wiki/Autocomplete_Types). These are respected by a number of browsers, including Chrome.\r\n\r\n``` html\r\n<input type=\"text\" class=\"cc-number\" pattern=\"\\d*\" autocompletetype=\"cc-number\" placeholder=\"Card number\" required>\r\n```\r\n\r\nSet `autocompletetype` to `cc-number` for credit card numbers, `cc-exp` for credit card expiry and `cc-csc` for the CVC (security code).\r\n\r\n## Mobile recommendations\r\n\r\nWe recommend you set the `pattern` attribute which will cause the numeric keyboard to be displayed on mobiles:\r\n\r\n``` html\r\n<input class=\"cc-number\" pattern=\"\\d*\">\r\n```\r\n\r\nYou may have to turn off HTML5 validation (using the `novalidate` form attribute) when using this `pattern`, as it won't match space formatting.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}